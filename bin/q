#!/usr/bin/env ruby
# frozen_string_literal: true

require 'net/http'
require 'json'
require 'uri'

API_KEY = ENV['OPENAI_API_KEY']
API_URL = 'https://api.openai.com/v1/chat/completions'

def generate_command(prompt)
  shell = `basename $SHELL`.strip
  uname = `uname`.strip

  prompt = <<~PROMPT
    Return cli command(s) suitable for copy/pasting into '#{shell}' on '#{uname}'.

    Do NOT include commentary NOR Markdown triple-backtick code blocks.
    Your entire response will be copied into terminal automatically and should be executable as is.

    The command should do this: #{prompt}
  PROMPT

  llm(prompt)
end

def llm(prompt)
  uri = URI.parse(API_URL)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true

  request = Net::HTTP::Post.new(uri.request_uri)
  request['Content-Type'] = 'application/json'
  request['Authorization'] = "Bearer #{API_KEY}"

  request.body = {
    model: 'gpt-3.5-turbo',
    messages: [
      { role: 'user', content: prompt }
    ]
  }.to_json

  response = http.request(request)
  if response.code == '200'
    result = JSON.parse(response.body)
    result['choices'][0]['message']['content']
  else
    $stderr.warn "Error: #{response.code} - #{response.message}"
    $stderr.warn
    $stderr.warn response.body
    nil
  end
end

def copy_to_clipboard(text)
  # only works on osx
  IO.popen('pbcopy', 'w') { |f| f << text }
rescue
  false
end

if ARGV.empty?
  puts 'Usage: q <prompt>'
  exit 1
end

prompt = ARGV.join(' ')
command = generate_command(prompt)

if command
  puts command
  puts "\n(copied to clipboard)" if copy_to_clipboard(command)
else
  $stderr.warn 'Failed to generate command.'
  exit 1
end
