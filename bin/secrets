#!/bin/bash

set -euo pipefail

# Configuration
SECRETS_ID="${HOME}/.ssh/id_ed25519"
HOSTKEY_FILE="${HOME}/.ssh/hostkey"
SECRETS_FILE="${SECRETS_FILE:-${DOTFILES_PATH}/src/secrets.age}"
SECRETS_HOSTS="${SECRETS_HOSTS:-${DOTFILES_PATH}/src/secrets.hosts}"

# Global temporary file
TMPFILE=$(mktemp)
trap 'rm -f "$TMPFILE"' EXIT

# Helper functions
die() {
    echo "Error: $1"
    exit 1
}

check_dependencies() {
    command -v age >/dev/null 2>&1 || die "age is not installed"
    command -v sha256sum >/dev/null 2>&1 || die "sha256sum is not installed"
}

generate_hostkey() {
    if [ ! -f "$HOSTKEY_FILE" ]; then
        echo "Generating hostkey..."
        ssh-keygen -t ed25519 -f "$HOSTKEY_FILE" -N ""
    fi
}

ensure_secrets_id() {
    if [ ! -f "$SECRETS_ID.pub" ]; then
        read -p "OK to generate a $SECRETS_ID key? " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "Generating secrets ID..."
            ssh-keygen -t ed25519 -f "$SECRETS_ID" -N ""
            echo "Secrets ID generated"
            exit 0
        else
            die "Aborting"
        fi
    fi
}

# Returns:
# 0 - Host can access secrets
# 1 - No secrets file exists yet
# 2 - Host key not in hosts file
# 3 - Host key cannot decrypt
check_host_access() {
    generate_hostkey
    ensure_secrets_id

    if [ ! -f "$SECRETS_FILE" ] && [ ! -f "$SECRETS_HOSTS" ]; then
        echo "No secrets file exists yet. To get started:"
        echo "1. Run 'secrets add-this-host' on this machine to create your first key"
        echo "2. Run 'secrets edit' to create and encrypt your first secrets"
        return 1
    fi

    # Check if this host's key is in the hosts file
    if ! grep -qF -- "$(cat "$HOSTKEY_FILE.pub")" "$SECRETS_HOSTS"; then
        echo "This host is not authorized to access secrets."
        echo
        echo "To authorize this host:"
        echo "1. Run 'secrets add-this-host' to add this host's key"
        echo "2. Run 'secrets revalidate' on a machine that can already decrypt"
        return 2
    fi

    # If secrets file exists, check if we can decrypt
    if [ -f "$SECRETS_FILE" ]; then
        if ! age --decrypt -i "$SECRETS_ID" -o /dev/null "$SECRETS_FILE" 2>/dev/null; then
            echo "This host's key is in the hosts file but cannot decrypt."
            echo
            echo "To fix this, either:"
            echo "1. Run 'secrets revalidate' on a machine that can decrypt to authorize this key"
            echo "2. Run 'secrets edit' on a machine that can decrypt, then try again"
            echo
            echo "If you don't have access to a machine that can decrypt:"
            echo "Ask someone with access to run 'secrets revalidate' to authorize your key"
            return 3
        fi
    fi

    return 0
}

decrypt_secrets() {
    local output_file="$1"

    # Try to decrypt
    if ! age --decrypt -i "$SECRETS_ID" -o "$output_file" "$SECRETS_FILE" 2>/dev/null; then
        check_host_access
        return 1
    fi
}

# Commands
cmd_list() {
    check_host_access || exit 1
    decrypt_secrets "$TMPFILE" || exit 1
    cat "$TMPFILE"
}

cmd_eval() {
    cmd_list
    echo "* Secrets loaded" >&2
}

cmd_edit() {
    # Special case for first-time setup
    if [ ! -f "$SECRETS_FILE" ]; then
        check_host_access >/dev/null || exit 1
        echo "Creating new secrets file..."
        echo "export EXAMPLE_SECRET=change_me" >"$TMPFILE"
    else
        check_host_access || exit 1
        decrypt_secrets "$TMPFILE" || exit 1
    fi

    local original_hash
    original_hash=$(sha256sum "$TMPFILE" | cut -d' ' -f1)

    ${EDITOR:-nano} "$TMPFILE" || die "Editor exited with error"

    if [[ $original_hash == $(sha256sum "$TMPFILE" | cut -d' ' -f1) ]]; then
        echo "No changes made"
        exit 0
    fi

    if ! head -n 1 "$TMPFILE" | grep -q "^export "; then
        die "Invalid file format. First line must start with 'export'"
    fi

    age --encrypt -R "$SECRETS_HOSTS" -i "$SECRETS_ID" -o "$SECRETS_FILE" "$TMPFILE" ||
        die "Failed to encrypt secrets"

    echo "Secrets updated successfully. Run the following to add to your shell:"
    echo "  eval \$(secrets activate)"
}

cmd_revalidate() {
    check_host_access || exit 1
    decrypt_secrets "$TMPFILE" || exit 1

    # Reencrypt with all hosts
    age --encrypt -R "$SECRETS_HOSTS" -i "$SECRETS_ID" -o "$SECRETS_FILE" "$TMPFILE" ||
        die "Failed to reencrypt secrets"

    echo "Revalidation successful!"
    echo "File has been re-encrypted with all current host keys"
}

cmd_add_host() {
    generate_hostkey

    mkdir -p "$(dirname "$SECRETS_HOSTS")"
    touch "$SECRETS_HOSTS"

    local current_key
    current_key=$(cat "$HOSTKEY_FILE.pub")

    if grep -qFx -- "$current_key" "$SECRETS_HOSTS"; then
        echo "This exact key is already authorized"
        echo "Note: The key still needs to be validated by running 'secrets revalidate' on a machine that can decrypt"
        exit 0
    fi

    local current_hostname
    current_hostname=$(echo "$current_key" | awk '{print $3}')
    local old_keys
    old_keys=$(grep " ${current_hostname}$" "$SECRETS_HOSTS" || true)

    if [ -n "$old_keys" ]; then
        echo "Found existing key(s) for host '$current_hostname':"
        echo "$old_keys"
        echo
        read -p "Remove old key(s) and add new one? [y/N] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sed -i "/ ${current_hostname}$/d" "$SECRETS_HOSTS"
            echo "$current_key" >>"$SECRETS_HOSTS"
            echo "Old key(s) removed and new key added successfully"
        else
            echo "Operation cancelled"
            exit 1
        fi
    else
        echo "$current_key" >>"$SECRETS_HOSTS"
        echo "Host key added successfully"
    fi

    echo "Note: The key needs to be validated by running 'secrets revalidate' on a machine that can decrypt"
}

# Main
main() {
    check_dependencies
    generate_hostkey

    if [[ $# -eq 0 ]]; then
        echo "Usage: secrets <command>"
        echo
        echo "Commands:"
        echo "  list              Show raw decrypted secrets"
        echo "  activate          Output secrets for shell evaluation (recommended, use with: eval \$(secrets activate))"
        echo "  edit              Edit secrets in \$EDITOR"
        echo "  add-this-host     Add current host's key to authorized hosts"
        echo "  revalidate        Reencrypt secrets with all current host keys"
        exit 1
    fi

    local cmd="$1"
    shift

    case "$cmd" in
    list)
        cmd_list "$@"
        ;;
    activate)
        cmd_eval "$@"
        ;;
    edit)
        cmd_edit "$@"
        ;;
    add-this-host)
        cmd_add_host "$@"
        ;;
    revalidate)
        cmd_revalidate "$@"
        ;;
    *)
        echo "Error: Unknown command '$cmd'"
        exit 1
        ;;
    esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
